// ==UserScript==
// @name         NON TOURISTIC ‚Äî –ê–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏–µ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –∏ —Ç–æ—á–Ω–æ)
// @namespace    http://bro.imei.kg/
// @version      2.4
// @description  –ê–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–æ–∫ –∏–∑ NON TOURISTIC ‚Äî —Ç–æ—á–Ω–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É, –∞ –Ω–µ –∏–Ω–¥–µ–∫—Å—É
// @match        https://inmobiles.imei.kg/PersonalImportation
// @match        https://inmobiles.imei.kg/PersonalImportationRequestsAdditionalInfo
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    let currentIndex = 5;
    let maxToOpen = 10;
    let openedCount = 0;
    const interval = 1; // —Å–µ–∫—É–Ω–¥
    let rows = [];
    let running = false;

    // –ü–∞–Ω–µ–ª—å
    const panel = document.createElement('div');
    panel.style = `
        position: fixed; top: 20px; left: 20px; z-index: 9999;
        background: white; padding: 10px; border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.2); border: 1px solid #ccc;
    `;
    panel.innerHTML = `
        <button id="startBtn" style="background:#28a745;color:#fff;padding:6px 14px;border:none;border-radius:5px;margin-right:5px;">‚ñ∂ –°—Ç–∞—Ä—Ç</button>
        <button id="stopBtn" style="background:#dc3545;color:#fff;padding:6px 14px;border:none;border-radius:5px;">‚èπ –°—Ç–æ–ø</button>
        <div style="margin-top:8px;">
            –û—Ç–∫—Ä—ã—Ç–æ: <span id="openedCount">0</span> –∏–∑ <span id="maxToOpenVal">${maxToOpen}</span><br>
            üî¢ –ö–æ–ª-–≤–æ: <input id="maxToOpenInput" type="number" min="1" max="50" value="${maxToOpen}" style="width: 60px; margin-top: 5px;">
        </div>
    `;
    document.body.appendChild(panel);

    const startBtn = document.getElementById('startBtn');
    const stopBtn = document.getElementById('stopBtn');
    const countSpan = document.getElementById('openedCount');
    const inputField = document.getElementById('maxToOpenInput');
    const maxToOpenVal = document.getElementById('maxToOpenVal');

    function findNonTouristicRows() {
        const header = [...document.querySelectorAll('h3.kt-portlet__head-title')]
            .find(h3 => h3.textContent.includes('NON TOURISTIC'));
        if (!header) return null;
        const container = header.closest('div.kt-portlet.kt-portlet--mobile');
        return container ? [...container.querySelectorAll('tbody tr')] : null;
    }

    async function openNext() {
        if (!running || openedCount >= maxToOpen || currentIndex >= rows.length) {
            running = false;
            alert(`‚úÖ –û—Ç–∫—Ä—ã—Ç–æ ${openedCount} –∑–∞—è–≤–æ–∫. –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`);
            return;
        }

        const row = rows[currentIndex];
        const dots = row.querySelector('a.btn-clean');

        currentIndex++;

        if (!dots) {
            setTimeout(openNext, interval * 1000);
            return;
        }

        dots.click();

        setTimeout(() => {
            const menu = document.querySelector('.dropdown-menu.show');
            if (menu) {
                const viewLink = [...menu.querySelectorAll('a')].find(a => a.textContent.includes('View Details'));

                if (viewLink) {
                    const event = new MouseEvent('click', {
                        bubbles: true,
                        cancelable: true,
                        view: window
                    });
                    viewLink.dispatchEvent(event);

                    openedCount++;
                    countSpan.textContent = openedCount;
                }
            }

            document.body.click();

            if (running) {
                setTimeout(openNext, interval * 1000);
            }
        }, 300);
    }

    startBtn.addEventListener('click', () => {
        if (running) return;

        const inputVal = parseInt(inputField.value, 10);
        if (!isNaN(inputVal) && inputVal > 0) {
            maxToOpen = inputVal;
            maxToOpenVal.textContent = maxToOpen;
        }

        rows = findNonTouristicRows();
        if (!rows || rows.length === 0) {
            alert("‚ùå NON TOURISTIC –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
            return;
        }

        openedCount = 0;
        countSpan.textContent = '0';
        running = true;
        openNext();
    });

    stopBtn.addEventListener('click', () => {
        running = false;
    });
})();
