// ==UserScript==
// @name         NON TOURISTIC ‚Äî –ê–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏–µ
// @namespace    http://imei.kg/
// @version      2.0
// @description  NON TOURISTIC 
// @match        https://inmobiles.imei.kg/PersonalImportation
// @match        https://inmobiles.imei.kg/PersonalImportationRequestsAdditionalInfo
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    let currentIndex = 5;
    let maxToOpen = 10;
    let openedCount = 0;
    const interval = 5;
    let rows = [];
    let running = false;

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    const savedPos = JSON.parse(localStorage.getItem('nt_panel_position') || '{}');
    const defaultTop = savedPos.top ?? 20;
    const defaultLeft = savedPos.left ?? 20;

    // –ü–∞–Ω–µ–ª—å
    const panel = document.createElement('div');
    panel.id = 'nt-panel';
    panel.style = `
        position: fixed; top: ${defaultTop}px; left: ${defaultLeft}px; z-index: 9999;
        background: white; padding: 10px; border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.2); border: 1px solid #ccc;
        font-family: Arial, sans-serif;
        font-size: 14px;
        cursor: move;
    `;
    panel.innerHTML = `
        <div style="margin-bottom: 8px;">
            üî¢ –ù–∞—á–∞—Ç—å —Å —Å—Ç—Ä–æ–∫–∏: <input id="startIndexInput" type="number" min="0" value="${currentIndex}" style="width: 50px;">
        </div>
        <div style="margin-bottom: 8px;">
            üì¶ –ö–æ–ª-–≤–æ –∑–∞—è–≤–æ–∫: <input id="maxToOpenInput" type="number" min="1" max="50" value="${maxToOpen}" style="width: 50px;">
        </div>
        <div style="margin-bottom: 10px;">
            <button id="startBtn" style="background:#28a745;color:#fff;padding:6px 12px;border:none;border-radius:5px;margin-right:5px;">‚ñ∂ –°—Ç–∞—Ä—Ç</button>
            <button id="stopBtn" style="background:#dc3545;color:#fff;padding:6px 12px;border:none;border-radius:5px;">‚èπ –°—Ç–æ–ø</button>
        </div>
        <div>üìà –û—Ç–∫—Ä—ã—Ç–æ: <span id="openedCount">0</span></div>
    `;
    document.body.appendChild(panel);

    const startBtn = document.getElementById('startBtn');
    const stopBtn = document.getElementById('stopBtn');
    const countSpan = document.getElementById('openedCount');
    const inputCount = document.getElementById('maxToOpenInput');
    const inputStart = document.getElementById('startIndexInput');

    // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏
    let isDragging = false;
    let offsetX, offsetY;

    panel.addEventListener('mousedown', e => {
        if (e.target.tagName === 'INPUT' || e.target.tagName === 'BUTTON') return;
        isDragging = true;
        offsetX = e.clientX - panel.getBoundingClientRect().left;
        offsetY = e.clientY - panel.getBoundingClientRect().top;
    });

    document.addEventListener('mousemove', e => {
        if (isDragging) {
            const left = e.clientX - offsetX;
            const top = e.clientY - offsetY;
            panel.style.left = `${left}px`;
            panel.style.top = `${top}px`;
            localStorage.setItem('nt_panel_position', JSON.stringify({ left, top }));
        }
    });

    document.addEventListener('mouseup', () => {
        isDragging = false;
    });

    function findNonTouristicRows() {
        const header = [...document.querySelectorAll('h3.kt-portlet__head-title')]
            .find(h3 => h3.textContent.includes('NON TOURISTIC'));
        if (!header) return null;
        const container = header.closest('div.kt-portlet.kt-portlet--mobile');
        return container ? [...container.querySelectorAll('tbody tr')] : null;
    }

    async function openNext() {
        if (!running || openedCount >= maxToOpen || currentIndex >= rows.length) {
            running = false;
            alert(`‚úÖ –û—Ç–∫—Ä—ã—Ç–æ ${openedCount} –∑–∞—è–≤–æ–∫. –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`);
            return;
        }

        const row = rows[currentIndex];
        const dots = row.querySelector('a.btn-clean');

        currentIndex++;

        if (!dots) {
            setTimeout(openNext, interval * 1000);
            return;
        }

        dots.click();

        setTimeout(() => {
            const menu = document.querySelector('.dropdown-menu.show');
            if (menu) {
                const viewLink = [...menu.querySelectorAll('a')].find(a => a.textContent.includes('View Details'));

                if (viewLink) {
                    const event = new MouseEvent('click', {
                        bubbles: true,
                        cancelable: true,
                        view: window
                    });
                    viewLink.dispatchEvent(event);

                    openedCount++;
                    countSpan.textContent = openedCount;
                }
            }

            document.body.click();

            if (running) {
                setTimeout(openNext, interval * 1000);
            }
        }, 300);
    }

    startBtn.addEventListener('click', () => {
        if (running) return;

        const countVal = parseInt(inputCount.value, 10);
        const startVal = parseInt(inputStart.value, 10);

        if (!isNaN(countVal) && countVal > 0) {
            maxToOpen = countVal;
        }

        if (!isNaN(startVal) && startVal >= 0) {
            currentIndex = startVal;
        }

        rows = findNonTouristicRows();
        if (!rows || rows.length === 0) {
            alert("‚ùå NON TOURISTIC –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
            return;
        }

        openedCount = 0;
        countSpan.textContent = '0';
        running = true;
        openNext();
    });

    stopBtn.addEventListener('click', () => {
        running = false;
    });
})();
